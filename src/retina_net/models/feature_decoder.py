import tensorflow as tf

keras = tf.keras


class FeatureDecoder(keras.Model):

    def __init__(self, feature_decoder_config):
        super(FeatureDecoder, self).__init__()
        self.is_training = keras.backend.learning_phase()
        l2_norm_rate = feature_decoder_config['l2_norm_rate']

        ###########################################################
        # Highest Pyramid Layers  p5-p7 as generated by retinanet #
        ###########################################################
        self.c5_reduced = keras.layers.Conv2D(
            filters=256,
            kernel_size=(
                1,
                1),
            strides=(
                1,
                1),
            padding='same',
            activation='linear',
            kernel_initializer='he_normal',
            kernel_regularizer=keras.regularizers.l2(l2_norm_rate),
            name='C5_reduced')

        self.p5 = keras.layers.Conv2D(
            filters=256,
            kernel_size=(
                3,
                3),
            strides=(
                1,
                1),
            padding='same',
            activation='linear',
            kernel_initializer='he_normal',
            kernel_regularizer=keras.regularizers.l2(l2_norm_rate),
            name='P5')

        self.p6 = keras.layers.Conv2D(
            filters=256,
            kernel_size=(
                3,
                3),
            strides=(
                2,
                2),
            padding='same',
            activation='linear',
            kernel_initializer='he_normal',
            kernel_regularizer=keras.regularizers.l2(l2_norm_rate),
            name='P6')

        self.p7 = keras.layers.Conv2D(
            filters=256,
            kernel_size=(
                3,
                3),
            strides=(
                2,
                2),
            padding='same',
            activation='linear',
            kernel_initializer='he_normal',
            kernel_regularizer=keras.regularizers.l2(l2_norm_rate),
            name='P7')

        #######################
        # Second Pyramid Layer#
        #######################
        self.c4_reduced = keras.layers.Conv2D(
            filters=256,
            kernel_size=(
                1,
                1),
            strides=(
                1,
                1),
            padding='same',
            activation='linear',
            kernel_initializer='he_normal',
            kernel_regularizer=keras.regularizers.l2(l2_norm_rate),
            name='C4_reduced')

        self.p4 = keras.layers.Conv2D(
            filters=256,
            kernel_size=(
                3,
                3),
            strides=(
                1,
                1),
            padding='same',
            activation='linear',
            kernel_initializer='he_normal',
            kernel_regularizer=keras.regularizers.l2(l2_norm_rate),
            name='P4')

        #######################
        # Third Pyramid Layer #
        #######################
        self.c3_reduced = keras.layers.Conv2D(
            filters=256,
            kernel_size=(
                1,
                1),
            strides=(
                1,
                1),
            padding='same',
            activation='linear',
            kernel_initializer='he_normal',
            kernel_regularizer=keras.regularizers.l2(l2_norm_rate),
            name='C3_reduced')

        self.p3 = keras.layers.Conv2D(
            filters=256,
            kernel_size=(
                3,
                3),
            strides=(
                1,
                1),
            padding='same',
            activation='linear',
            kernel_initializer='he_normal',
            kernel_regularizer=keras.regularizers.l2(l2_norm_rate),
            name='P3')

        self.relu = keras.layers.ReLU()

    def call(self, map_5, map_4, map_3):
        ###########################################################
        # Highest Pyramid Layers  p5-p7 as generated by retinanet #
        ###########################################################
        c5_reduced = self.c5_reduced(map_5)
        p5 = self.p5(c5_reduced)
        p6 = self.p6(map_5)
        p7 = self.p7(self.relu(p6))

        ###########################
        # Second Pyramid Layer p4 #
        ###########################
        c4_reduced = self.c4_reduced(map_4)
        up4 = tf.image.resize(
            c5_reduced,
            tf.shape(c4_reduced)[
                1:3],
            method=tf.image.ResizeMethod.NEAREST_NEIGHBOR,
            name='P5_upsampled')
        m4 = keras.layers.add([up4, c4_reduced], name='P4_merged')
        p4 = self.p4(m4)

        #######################
        # Third Pyramid Layer #
        #######################
        c3_reduced = self.c3_reduced(map_3)
        up3 = tf.image.resize(
            m4,
            tf.shape(c3_reduced)[
                1:3],
            method=tf.image.ResizeMethod.NEAREST_NEIGHBOR,
            name='P4_upsampled')
        m3 = keras.layers.add([up3, c3_reduced], name='P3_merged')
        p3 = self.p3(m3)

        return p3, p4, p5, p6, p7
